lyear=100000,
Linf=58.97, #(Sedar 43, 2015) p. 64
a3=0.5,
L1=28.3, #(Sedar 43, 2015) p. 64
BK=0.14, #(Sedar 43, 2015) p. 64
Weight_scaling=2.16e-5, #(Sedar 43, 2015) p. 64
Weight_allometry=3.007, #(Sedar 43, 2015) p. 64
Mref=0.28, #(Sedar 43, 2015) p. 32
Mat_50=31.0, #(Sedar 43, 2015) p. 64
Mat_slope=-0.065, #(Sedar 43, 2015) p. 64
Sel_50=28.9, #need to update!!!! maybe average across all fleets, dome shaped in Sedar 43
Sel_slope=7, #need to update!!!! maybe average across all fleets
B1=4.2623060,                   #Double normal selectivity parameters
B2=-1.9183504,
B3=0.9908788,
B4=0.4789121,
B5=-15.7304389,
B6=-13.3039320,
R0=exp(9.7608), #(Sedar 43, 2015) p. 64
h=0.4593, #(Sedar 43, 2015) p. 64
sd_rec=0.3582, #(Sedar 43, 2015) p. 64
const_F=TRUE,
fint=c(0.268,0.275)[j], #need to update!!!!
fhigh=0.5425,#need to update!!!!
flow=0.1259,  #need to update!!!!
stochastic=TRUE)
print(sum(t(t(x$Caa)*x$Waa)))}}
Amin<-0
Amax<-10
age<-Amin:Amax
B1 <- 4.2623060
B2 <- -1.9183504
B3 <- 0.9908788
B4 <- 0.4789121
B5 <- -15.7304389
B6 <- -13.3039320
peak2<-B1+1+((0.99*Amax-B1-1)/(1+exp(-B2)))
t1<-exp(-(Amin-B1)^2/exp(B3))
t2<-exp(-(Amax-peak2)^2/exp(B4))
j1<-(1+exp(-20*((age-B1)/(1+abs(age-B1)))))^-1
j2<-(1+exp(-20*((age-peak2)/(1+abs(age-peak2)))))^-1
asc<-(1+exp(-B5))^-1+(1-(1+exp(-B5))^-1)*((exp(-(age-B1)^2/exp(B3))-t1)/(1-t1))
dsc<-1+(((1+exp(-B6))^-1)-1)*((exp(-(age-peak2)/exp(B4))-1)/(t2-1))
Selvec<-asc*(1-j1)+j1*((1-j2)+j2*dsc)
plot(age, Selvec, las=1, pch=16, type="b",xlab="Age", ylab="Selectivity")
library(TMB)
setwd("C:/Users/fischn/Documents/GitHub/Assessment_AgeingError")
compile("SCAA_forDerek_wAE.cpp")
AE_mat<-diag(length(Trigger_runs[[s]]$fage:Trigger_runs[[s]]$lage))
Trigger_OM<-OM_wdat
N_sim<-1:1
res_list<-list()
for (s in N_sim){
OM<-Trigger_OM[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
B5=runif(1,min=OM$OM$B5-abs(OM$OM$B5)*0.35,max=OM$OM$B5+abs(OM$OM$B5)*0.35),
B6=runif(1,min=OM$OM$B6-abs(OM$OM$B6)*0.35,max=OM$OM$B6+abs(OM$OM$B6)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.35,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5, -10,-10,-10,-10,-10,-10,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,  20, 20, 20, 20, 20, 20,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
N_sim<-1:1
res_list<-list()
for (s in N_sim){
OM<-Trigger_runs[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
B5=runif(1,min=OM$OM$B5-abs(OM$OM$B5)*0.35,max=OM$OM$B5+abs(OM$OM$B5)*0.35),
B6=runif(1,min=OM$OM$B6-abs(OM$OM$B6)*0.35,max=OM$OM$B6+abs(OM$OM$B6)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.35,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5, -10,-10,-10,-10,-10,-10,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,  20, 20, 20, 20, 20, 20,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
OM$OM$fyear
OM$fyear
N_sim<-1:1
res_list<-list()
for (s in N_sim){
OM<-Trigger_runs[[s]]
dat<-list(fyear=OM$fyear, lyear=75, fage=OM$fage, lage=OM$lage,
years=OM$fyear:75, ages=OM$fage:OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$Mat,
Laa=OM$Laa,
Waa=OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$Mref-OM$Mref*0.35,max=OM$Mref+OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$R0-OM$R0*0.35,max=OM$R0+OM$R0*0.35)),
log_sigma_rec=log(OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$Sel_slope-OM$Sel_slope*0.35,max=OM$Sel_slope+OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$Sel_50-OM$Sel_50*0.35,max=OM$Sel_50+OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$B1)*0.35,max=OM$B1+abs(OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$B2)*0.35,max=OM$B2+abs(OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$B3)*0.35,max=OM$B3+abs(OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$B4)*0.35,max=OM$B4+abs(OM$B4)*0.35),
B5=runif(1,min=OM$OM$B5-abs(OM$B5)*0.35,max=OM$B5+abs(OM$B5)*0.35),
B6=runif(1,min=OM$OM$B6-abs(OM$B6)*0.35,max=OM$B6+abs(OM$B6)*0.35),
log_fint=log(runif(length(OM$F_int[26:100]),min=OM$F_int[26:100]-OM$F_int[26:100]*0.35,max=OM$F_int[26:100]+OM$F_int[26:100]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5, -10,-10,-10,-10,-10,-10,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,  20, 20, 20, 20, 20, 20,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
diag(10)
Get_Data<-function(OM=NA,              #Operating model from which to model
dat_seed=1,         #seed to start random number generation for reproducibility
fyear_dat=26,       #first year that has data
lyear_dat=100,      #last year with data
sd_catch=0.05,      #SD of catch data
#Composition sample size in each year (vector of length(fyear:lyear)). If zero then no comp data for that year
N_Comp=c(rep(0,25),30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30)),
q_index=0.0001,     #Catchability of fishery index
sd_index=0.25,      #standard deviation of fishery index
#TRUE Ageing error matrix, if identity (diag), then no ageing error. This needs to have dimension length(fage:lage)*length(fage:lage)
AE_mat=diag(11))    #Given your true age i (row), this matrix defines the probability that you will be classified age j (column), #REMEMBER THIS NEEDS TO BE IN THE NUMBER OF AGES IN YOUR MODEL
{
set.seed(dat_seed)
#Getting Data
Obs_Catch<-Obs_Index<-NA
Obs_Catch_Comp<-Obs_Catch_Comp_noAE<-matrix(0,nrow=length(fyear_dat:lyear_dat),ncol=length(OM$fage:OM$lage))
Obs_Catch_Comp_wiY<-array(0,dim=c(length(fyear_dat:lyear_dat),length(OM$fage:OM$lage),length(OM$fage:OM$lage)))
for (d in fyear_dat:lyear_dat){
Obs_Catch[d-(fyear_dat-1)]<-rlnorm(1, meanlog=log(sum(OM$Caa[d,]*OM$Waa)), sdlog=sd_catch)
Obs_Index[d-(fyear_dat-1)]<-rlnorm(1, meanlog=log(sum(OM$Naa[d,]*((1-exp(-OM$Zaa[d,]))/OM$Zaa[d,])*OM$Sel*OM$Waa)*q_index), sdlog=sd_index)
Obs_Catch_Comp_noAE[d-(fyear_dat-1),]<-rmultinom(n=1,size=N_Comp[d], prob=OM$Caa[d,])
# *I think* this line code would be equivalent to the more kludgy and inefficient code below, but we won't run into efficiency issues so commented out in favor of double sampler
#    Obs_Catch_Comp[d-(fyear_dat-1),]<-rmultinom(n=1,size=N_Comp[d], prob=(OM$Caa%*%AE_mat)[d,])
#Getting observed data with Ageing error
#Another sampler is needed to get data in integers, as opposed to commented out line below
for (a in 1:length(OM$fage:OM$lage)){
if(Obs_Catch_Comp_noAE[d-(fyear_dat-1),a]>0){
Obs_Catch_Comp_wiY[d-(fyear_dat-1),a,]<-rmultinom(1,size=Obs_Catch_Comp_noAE[d-(fyear_dat-1),a],prob=AE_mat[a,])
}
}
Obs_Catch_Comp[d-(fyear_dat-1),]<-colSums(Obs_Catch_Comp_wiY[d-(fyear_dat-1),,])
}
#This would be *expected* data with ageing error but in decimals.
#  Obs_Catch_Comp<-Obs_Catch_Comp_noAE%*%AE_mat  #Getting observed data with Ageing error
return(list(OM=OM,dat_seed=dat_seed,sd_catch=sd_catch,N_Comp=N_Comp,q_index=q_index,sd_index=sd_index,fyear_dat=fyear_dat,lyear_dat=lyear_dat,
Obs_Catch=Obs_Catch,
Obs_Catch_CompnoAE=Obs_Catch_Comp_noAE,
Obs_Catch_Comp=Obs_Catch_Comp,
Obs_Index=Obs_Index))
}
Get_Data(OM=Trigger_runs[[1]])
T_wdat<-Get_Data(OM=Trigger_runs[[1]])
Trigger_OM<-T_wdat
#Doing N Simulations
N_sim<-1:1
res_list<-list()
for (s in N_sim){
OM<-Trigger_OM[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
B5=runif(1,min=OM$OM$B5-abs(OM$OM$B5)*0.35,max=OM$OM$B5+abs(OM$OM$B5)*0.35),
B6=runif(1,min=OM$OM$B6-abs(OM$OM$B6)*0.35,max=OM$OM$B6+abs(OM$OM$B6)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.35,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5, -10,-10,-10,-10,-10,-10,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,  20, 20, 20, 20, 20, 20,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
Trigger_OM<-T_wdat
#Doing N Simulations
N_sim<-1:1
res_list<-list()
for (s in N_sim){
OM<-Trigger_OM
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
B5=runif(1,min=OM$OM$B5-abs(OM$OM$B5)*0.35,max=OM$OM$B5+abs(OM$OM$B5)*0.35),
B6=runif(1,min=OM$OM$B6-abs(OM$OM$B6)*0.35,max=OM$OM$B6+abs(OM$OM$B6)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.35,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5, -10,-10,-10,-10,-10,-10,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,  20, 20, 20, 20, 20, 20,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
AE_mat
parm_names
OM$OM$lyear
Trigger_OM<-T_wdat
#Doing N Simulations
N_sim<-1:1
res_list<-list()
for (s in N_sim){
OM<-Trigger_OM
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
B5=runif(1,min=OM$OM$B5-abs(OM$OM$B5)*0.35,max=OM$OM$B5+abs(OM$OM$B5)*0.35),
B6=runif(1,min=OM$OM$B6-abs(OM$OM$B6)*0.35,max=OM$OM$B6+abs(OM$OM$B6)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.35,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
Sel_logis_k=factor(NA),
Sel_logis_midpt=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5, -10,-10,-10,-10,-10,-10,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,  20, 20, 20, 20, 20, 20,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
library(TMB)
compile("SCAA_forDerek_wAE.cpp")
compile("SCAA_forDerek_wAE.cpp")
Trigger_OM<-T_wdat
#Doing N Simulations
N_sim<-1:1
res_list<-list()
for (s in N_sim){
OM<-Trigger_OM
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
B5=runif(1,min=OM$OM$B5-abs(OM$OM$B5)*0.35,max=OM$OM$B5+abs(OM$OM$B5)*0.35),
B6=runif(1,min=OM$OM$B6-abs(OM$OM$B6)*0.35,max=OM$OM$B6+abs(OM$OM$B6)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.35,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5, -10,-10,-10,-10,-10,-10,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2,  20, 20, 20, 20, 20, 20,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
}
res_list[[1]]
