}
res_list_final <- list()
res_list_final <- foreach(i=1:nrow(scenarios),.packages='TMB') %dopar% {
sim_Fn(OM_text = as.character(scenarios[i,2]),
N_sim = N_sim, AE_mat = get(scenarios[i,3]))
}
View(res_list_final)
N_sim <-2
res_list_final <- foreach(i=1:nrow(scenarios),.packages='TMB') %dopar% {
sim_Fn(OM_text = as.character(scenarios[i,2]),
N_sim = N_sim, AE_mat = get(scenarios[i,3]))
}
res_list_perf <- sim_Fn(OM_text = "GT_OM_perf_wdat", N_sim = N_sim, AE_mat = AE_mat)
View(res_list_perf)
OM_text = "GT_OM_perf_wdat"
N_sim = N_sim
AE_mat = AE_mat
load(paste0(wd,"/",OM_text,".RData"))
Triggerfish_OM<-OM_wdat
#Doing N Simulations
N_sim<-1:N_sim
res_list<-list()
for (s in N_sim){
OM<-Triggerfish_OM[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=69, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:69, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Fec=OM$OM$Fec,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:94]),min=OM$OM$F_int[26:94]-OM$OM$F_int[26:94]*0.35,max=OM$OM$F_int[26:94]+OM$OM$F_int[26:94]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
#Bounds, need to be updated if you go back to logistic selectivity
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5, 1, -5, 0,-4,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5,  5, 2, 2,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
return(res_list)
}
View(res_list)
res_list[[2]]
res_list[[1]]
res_list<-list()
View(Triggerfish_OM)
for (s in N_sim){
OM<-Triggerfish_OM[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=69, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:69, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Fec=OM$OM$Fec,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:94]),min=OM$OM$F_int[26:94]-OM$OM$F_int[26:94]*0.35,max=OM$OM$F_int[26:94]+OM$OM$F_int[26:94]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
#Bounds, need to be updated if you go back to logistic selectivity
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5, 1, -5, 0,-4,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5,  5, 2, 2,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
}
View(res_list)
View(res_list)
res_list_perf <- sim_Fn(OM_text = "GT_OM_perf_wdat", N_sim = N_sim, AE_mat = AE_mat)
N_sim <- 2
res_list_perf <- sim_Fn(OM_text = "GT_OM_perf_wdat", N_sim = N_sim, AE_mat = AE_mat)
View(res_list_perf)
OM_text = "GT_OM_perf_wdat"
N_sim = N_sim
AE_mat = AE_mat
load(paste0(wd,"/",OM_text,".RData"))
Triggerfish_OM<-OM_wdat
#Doing N Simulations
N_sim<-1:N_sim
res_list<-list()
for (s in N_sim){
OM<-Triggerfish_OM[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=69, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:69, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Fec=OM$OM$Fec,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1,
AE_mat=AE_mat)
#Parameters
set.seed(s)
#Starting parameters drawing from uniform 35% below and above true value
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.35,max=OM$OM$Mref+OM$OM$Mref*0.35)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.35,max=OM$q_index+OM$q_index*0.35)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.35,max=OM$OM$R0+OM$OM$R0*0.35)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
#                Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.35,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.35)),
#                Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.35,max=OM$OM$Sel_50+OM$OM$Sel_50*0.35)),
B1=runif(1,min=OM$OM$B1-abs(OM$OM$B1)*0.35,max=OM$OM$B1+abs(OM$OM$B1)*0.35),                       #Double normal selectivity parameters
B2=runif(1,min=OM$OM$B2-abs(OM$OM$B2)*0.35,max=OM$OM$B2+abs(OM$OM$B2)*0.35),
B3=runif(1,min=OM$OM$B3-abs(OM$OM$B3)*0.35,max=OM$OM$B3+abs(OM$OM$B3)*0.35),
B4=runif(1,min=OM$OM$B4-abs(OM$OM$B4)*0.35,max=OM$OM$B4+abs(OM$OM$B4)*0.35),
log_fint=log(runif(length(OM$OM$F_int[26:94]),min=OM$OM$F_int[26:94]-OM$OM$F_int[26:94]*0.35,max=OM$OM$F_int[26:94]+OM$OM$F_int[26:94]*0.35)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_forDerek_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_forDerek_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
#Bounds, need to be updated if you go back to logistic selectivity
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5, 1, -5, 0,-4,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5,  5, 2, 2,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_forDerek_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
#res_list saves all sorts of output related to the assessment, a couple of examples below.
res_list[[s]]<-SCAA_fit
}
###############################################################################################
#Age structured population model simulator, and sampling model with Ageing error included
###############################################################################################
#Write where you would like your output
#and .cpp file has to be in working directory
wd<-"C:/Users/fischn/Dropbox/"
wd<-"C:/Users/Derek.Chamberlin/Work/Research/Age_Err_Simulation/Assessment_AgeingError"
source(paste0(wd,"/Functions.R"))
F_val_no_shrimp <- c(0.0021, 0.0008, 0.0044, 0.0073, 0.0104, 0.0144, 0.0179,
0.0214, 0.0251, 0.029, 0.0331, 0.0359, 0.0388, 0.042,
0.0453, 0.0493, 0.0514, 0.0533, 0.0546, 0.0566, 0.0589,
0.061, 0.0636, 0.0641, 0.0659, 0.0675, 0.0713, 0.0791,
0.0849, 0.0896, 0.0993, 0.1075, 0.1183, 0.1271, 0.1429,
0.1534, 0.3418, 0.3873, 0.2956, 0.1406, 0.1144, 0.2267,
0.1387, 0.3773, 0.44, 0.6917, 0.5739, 0.524, 0.537, 0.529,
0.6349, 0.3841, 0.348, 0.3341, 0.3455, 0.2727, 0.2915,
0.3712, 0.4446, 0.5625, 0.4175, 0.2842, 0.3183, 0.3144,
0.2173, 0.1708, 0.2802, 0.1516, 0.2865)
#Example for Gray Triggerfish-like life-history
#For Triggerfish, based on stochastic runs, fmsy is 0.268, MSY is 2969, SSBmsy is 10046
Nsim<-100
Triggerfish_runs<-list()
for (s in 1:Nsim){
Triggerfish_runs[[s]]<-SimPop(seed=s,
fage=0,
lage=10, #(Sedar 43, 2015)  p. 10
fyear=1,
#lyear=100,
lyear=length(F_val_no_shrimp)+25,
Linf=58.97, #(Sedar 43, 2015) p. 64
a3=0.5,
L1=28.3, #(Sedar 43, 2015) p. 64
BK=0.14, #(Sedar 43, 2015) p. 64
Weight_scaling=2.16e-5, #(Sedar 43, 2015) p. 64
Weight_allometry=3.007, #(Sedar 43, 2015) p. 64
Mref=0.3015598,                 #Reference M for constant or lorenzen.
M_pow=1.775641,                 #power for lorenzen M
Mat_50=31.0, #(Sedar 43, 2015) p. 64
Mat_slope=-0.065, #(Sedar 43, 2015) p. 64
Sel_50=28.9, # logistic selectivity, not used
Sel_slope=7, # logistic selectivity, not used
B1=4.374691,                   #Double normal selectivity parameters
B2=-3,                         #Nicks best approximation of trigger selectivity
B3=1.214063,
B4=1.582468,
R0=exp(9.7608), #(Sedar 43, 2015) p. 64
h=0.4593, #(Sedar 43, 2015) p. 64
sd_rec=0.3582, #(Sedar 43, 2015) p. 64
const_F=FALSE,
fint=0.0021, #based on cumulative F withouth shrimp fleet (Sedar 43)
fhigh=0.6917, #based on cumulative F withouth shrimp fleet (Sedar 43)
flow=0.0008, #based on cumulative F withouth shrimp fleet (Sedar 43)
F_man=TRUE,
F_val=F_val_no_shrimp,
stochastic=TRUE)
}
#save(Triggerfish_runs, file=paste0(wd,"/Triggerfish_Base.RData"))
#Looking at some plots of population
plot(1:95,Triggerfish_runs[[1]]$SSB/Triggerfish_runs[[1]]$SSB0, ylim=c(0,2.75), las=1, xlab="Year", ylab="SSB/SSB0", main="Triggerfish", type="l", col="grey50")
Triggerfish_Depl<-matrix(NA, nrow=Nsim,ncol=95)
Triggerfish_Depl[1,]<-Triggerfish_runs[[1]]$SSB/Triggerfish_runs[[1]]$SSB0
for(s in 2:Nsim){
Triggerfish_Depl[s,]<-Triggerfish_runs[[s]]$SSB/Triggerfish_runs[[s]]$SSB0
lines(1:95,Triggerfish_runs[[s]]$SSB/Triggerfish_runs[[s]]$SSB0, col="grey50")
}
#Ok looking at Inner 75% and inner 95% of simulations
plot(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.975), type="l", lty=2, ylim=c(0,2), las=1, xlab="Year", ylab="SSB/SSB0", main="Gray Triggerfish")
lines(1:95,apply(Triggerfish_Depl,2,median),lty=1)
lines(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.025),lty=2)
lines(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.875),lty=3)
lines(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.125),lty=3)
#############################################################
#TMB SCAAs fit to Fishery data
#############################################################
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_forDerek_wAE.cpp")
#Ageing Error Definitions
#Need to refine and add in no bias but imprecision scenarios
{
AE_mat<-diag(length(Triggerfish_runs[[s]]$fage:Triggerfish_runs[[s]]$lage))
AE_mat_constant <- AE_mat
AE_mat_linear <- AE_mat
AE_mat_curvilinear <- AE_mat
#sd = 1
sd = 0.2
bias = 1
plot(AE_mat[,3],col="white")
for (i in 1:nrow(AE_mat)) {
AE_mat_constant[,i]<-dnorm(1:nrow(AE_mat), mean = i-bias, sd = sd)/sum(dnorm(1:nrow(AE_mat), mean = i-bias, sd = sd))
lines(AE_mat_constant[,i])
}
bias = 0.25
sd_slope = 0.1707
sd_intercept = -0.0854
plot(AE_mat[,3],col="white")
for (i in 1:nrow(AE_mat)) {
AE_mat_linear[,i]<-dnorm(1:nrow(AE_mat), mean = i-(bias*i+0), sd = sd_slope*i+sd_intercept)/sum(dnorm(1:nrow(AE_mat), mean = i-(bias*i+0), sd = sd_slope*i+sd_intercept))
lines(AE_mat_linear[,i])
}
#From GT Oto, Old-spine comparison
#Need to change SD to curvilinear
bias1 = -0.0329
bias2 = 1.1207
bias3 = 0.3772
sd_slope = 0.1707
sd_intercept = -0.0854
plot(AE_mat[,3],col="white")
for (i in 1:nrow(AE_mat)) {
AE_mat_curvilinear[,i]<-dnorm(1:nrow(AE_mat), mean = ((bias1*i^2)+(bias2*i)-bias3), sd = sd_slope*i+sd_intercept)/sum(dnorm(1:nrow(AE_mat), mean = ((bias1*i^2)+(bias2*i)-bias3), sd = sd_slope*i+sd_intercept))
lines(AE_mat_curvilinear[,i])
}
}
#OMs run with different ageing error scenarios
{
OM_Err(OM_text = "GT_OM_perf_wdat", AE_mat = AE_mat)
OM_Err(OM_text = "GT_OM_constant_wdat", AE_mat = AE_mat_constant)
OM_Err(OM_text = "GT_OM_linear_wdat", AE_mat = AE_mat_linear)
OM_Err(OM_text = "GT_OM_curvilinear_wdat", AE_mat = AE_mat_curvilinear)
}
N_sim <- 2
res_list_perf <- sim_Fn(OM_text = "GT_OM_perf_wdat", N_sim = N_sim, AE_mat = AE_mat)
View(res_list_perf)
###############################################################################################
#Age structured population model simulator, and sampling model with Ageing error included
###############################################################################################
#Write where you would like your output
#and .cpp file has to be in working directory
wd<-"C:/Users/fischn/Dropbox/"
wd<-"C:/Users/Derek.Chamberlin/Work/Research/Age_Err_Simulation/Assessment_AgeingError"
source(paste0(wd,"/Functions.R"))
F_val_no_shrimp <- c(0.0021, 0.0008, 0.0044, 0.0073, 0.0104, 0.0144, 0.0179,
0.0214, 0.0251, 0.029, 0.0331, 0.0359, 0.0388, 0.042,
0.0453, 0.0493, 0.0514, 0.0533, 0.0546, 0.0566, 0.0589,
0.061, 0.0636, 0.0641, 0.0659, 0.0675, 0.0713, 0.0791,
0.0849, 0.0896, 0.0993, 0.1075, 0.1183, 0.1271, 0.1429,
0.1534, 0.3418, 0.3873, 0.2956, 0.1406, 0.1144, 0.2267,
0.1387, 0.3773, 0.44, 0.6917, 0.5739, 0.524, 0.537, 0.529,
0.6349, 0.3841, 0.348, 0.3341, 0.3455, 0.2727, 0.2915,
0.3712, 0.4446, 0.5625, 0.4175, 0.2842, 0.3183, 0.3144,
0.2173, 0.1708, 0.2802, 0.1516, 0.2865)
#Example for Gray Triggerfish-like life-history
#For Triggerfish, based on stochastic runs, fmsy is 0.268, MSY is 2969, SSBmsy is 10046
Nsim<-100
Triggerfish_runs<-list()
for (s in 1:Nsim){
Triggerfish_runs[[s]]<-SimPop(seed=s,
fage=0,
lage=10, #(Sedar 43, 2015)  p. 10
fyear=1,
#lyear=100,
lyear=length(F_val_no_shrimp)+25,
Linf=58.97, #(Sedar 43, 2015) p. 64
a3=0.5,
L1=28.3, #(Sedar 43, 2015) p. 64
BK=0.14, #(Sedar 43, 2015) p. 64
Weight_scaling=2.16e-5, #(Sedar 43, 2015) p. 64
Weight_allometry=3.007, #(Sedar 43, 2015) p. 64
Mref=0.3015598,                 #Reference M for constant or lorenzen.
M_pow=1.775641,                 #power for lorenzen M
Mat_50=31.0, #(Sedar 43, 2015) p. 64
Mat_slope=-0.065, #(Sedar 43, 2015) p. 64
Sel_50=28.9, # logistic selectivity, not used
Sel_slope=7, # logistic selectivity, not used
B1=4.374691,                   #Double normal selectivity parameters
B2=-3,                         #Nicks best approximation of trigger selectivity
B3=1.214063,
B4=1.582468,
R0=exp(9.7608), #(Sedar 43, 2015) p. 64
h=0.4593, #(Sedar 43, 2015) p. 64
sd_rec=0.3582, #(Sedar 43, 2015) p. 64
const_F=FALSE,
fint=0.0021, #based on cumulative F withouth shrimp fleet (Sedar 43)
fhigh=0.6917, #based on cumulative F withouth shrimp fleet (Sedar 43)
flow=0.0008, #based on cumulative F withouth shrimp fleet (Sedar 43)
F_man=TRUE,
F_val=F_val_no_shrimp,
stochastic=TRUE)
}
#save(Triggerfish_runs, file=paste0(wd,"/Triggerfish_Base.RData"))
#Looking at some plots of population
plot(1:95,Triggerfish_runs[[1]]$SSB/Triggerfish_runs[[1]]$SSB0, ylim=c(0,2.75), las=1, xlab="Year", ylab="SSB/SSB0", main="Triggerfish", type="l", col="grey50")
Triggerfish_Depl<-matrix(NA, nrow=Nsim,ncol=95)
Triggerfish_Depl[1,]<-Triggerfish_runs[[1]]$SSB/Triggerfish_runs[[1]]$SSB0
for(s in 2:Nsim){
Triggerfish_Depl[s,]<-Triggerfish_runs[[s]]$SSB/Triggerfish_runs[[s]]$SSB0
lines(1:95,Triggerfish_runs[[s]]$SSB/Triggerfish_runs[[s]]$SSB0, col="grey50")
}
#Ok looking at Inner 75% and inner 95% of simulations
plot(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.975), type="l", lty=2, ylim=c(0,2), las=1, xlab="Year", ylab="SSB/SSB0", main="Gray Triggerfish")
lines(1:95,apply(Triggerfish_Depl,2,median),lty=1)
lines(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.025),lty=2)
lines(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.875),lty=3)
lines(1:95,apply(Triggerfish_Depl,2,quantile,probs=0.125),lty=3)
#############################################################
#TMB SCAAs fit to Fishery data
#############################################################
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_forDerek_wAE.cpp")
#Ageing Error Definitions
#Need to refine and add in no bias but imprecision scenarios
{
AE_mat<-diag(length(Triggerfish_runs[[s]]$fage:Triggerfish_runs[[s]]$lage))
AE_mat_constant <- AE_mat
AE_mat_linear <- AE_mat
AE_mat_curvilinear <- AE_mat
#sd = 1
sd = 0.2
bias = 1
plot(AE_mat[,3],col="white")
for (i in 1:nrow(AE_mat)) {
AE_mat_constant[,i]<-dnorm(1:nrow(AE_mat), mean = i-bias, sd = sd)/sum(dnorm(1:nrow(AE_mat), mean = i-bias, sd = sd))
lines(AE_mat_constant[,i])
}
bias = 0.25
sd_slope = 0.1707
sd_intercept = -0.0854
plot(AE_mat[,3],col="white")
for (i in 1:nrow(AE_mat)) {
AE_mat_linear[,i]<-dnorm(1:nrow(AE_mat), mean = i-(bias*i+0), sd = sd_slope*i+sd_intercept)/sum(dnorm(1:nrow(AE_mat), mean = i-(bias*i+0), sd = sd_slope*i+sd_intercept))
lines(AE_mat_linear[,i])
}
#From GT Oto, Old-spine comparison
#Need to change SD to curvilinear
bias1 = -0.0329
bias2 = 1.1207
bias3 = 0.3772
sd_slope = 0.1707
sd_intercept = -0.0854
plot(AE_mat[,3],col="white")
for (i in 1:nrow(AE_mat)) {
AE_mat_curvilinear[,i]<-dnorm(1:nrow(AE_mat), mean = ((bias1*i^2)+(bias2*i)-bias3), sd = sd_slope*i+sd_intercept)/sum(dnorm(1:nrow(AE_mat), mean = ((bias1*i^2)+(bias2*i)-bias3), sd = sd_slope*i+sd_intercept))
lines(AE_mat_curvilinear[,i])
}
}
#OMs run with different ageing error scenarios
{
OM_Err(OM_text = "GT_OM_perf_wdat", AE_mat = AE_mat)
OM_Err(OM_text = "GT_OM_constant_wdat", AE_mat = AE_mat_constant)
OM_Err(OM_text = "GT_OM_linear_wdat", AE_mat = AE_mat_linear)
OM_Err(OM_text = "GT_OM_curvilinear_wdat", AE_mat = AE_mat_curvilinear)
}
N_sim <- 2
scenarios <- read.csv("Simulation Scenarios for model.csv") #data frame with columns Scenario #, OM_test, AE_mat
library(foreach)
library(doParallel)
library(parallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
registerDoParallel(cl)
parallel::clusterExport(cl = cl, varlist = c('AE_mat', 'AE_mat_constant', 'AE_mat_linear',
'AE_mat_curvilinear','scenarios', 'N_sim'), envir = .GlobalEnv)
scenarios <- scenarios[-2:-16,]
res_list_final <- list()
res_list_final <- foreach(i=1:nrow(scenarios),.packages='TMB') %dopar% {
sim_Fn(OM_text = as.character(scenarios[i,2]),
N_sim = N_sim, AE_mat = get(scenarios[i,3]))
}
View(res_list_final)
scenarios <- read.csv("Simulation Scenarios for model.csv") #data frame with columns Scenario #, OM_test, AE_mat
scenarios <- scenarios[-3:-16,]
res_list_final <- list()
res_list_final <- foreach(i=1:nrow(scenarios),.packages='TMB') %dopar% {
sim_Fn(OM_text = as.character(scenarios[i,2]),
N_sim = N_sim, AE_mat = get(scenarios[i,3]))
}
View(res_list_final)
N_sim <- 2
scenarios <- read.csv("Simulation Scenarios for model.csv") #data frame with columns Scenario #, OM_test, AE_mat
library(foreach)
library(doParallel)
library(parallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
registerDoParallel(cl)
parallel::clusterExport(cl = cl, varlist = c('AE_mat', 'AE_mat_constant', 'AE_mat_linear',
'AE_mat_curvilinear','scenarios', 'N_sim'), envir = .GlobalEnv)
res_list_final <- list()
res_list_final <- foreach(i=1:nrow(scenarios),.packages='TMB') %dopar% {
sim_Fn(OM_text = as.character(scenarios[i,2]),
N_sim = N_sim, AE_mat = get(scenarios[i,3]))
}
saveRDS(res_list_final, file=paste0(wd,"/SCAAfit_GT_All.RData"))
stopCluster(cl)
View(res_list_final)
scenarios <- scenarios[-2:-16,]
N_sim <- 10
scenarios <- read.csv("Simulation Scenarios for model.csv") #data frame with columns Scenario #, OM_test, AE_mat
scenarios <- scenarios[-2:-16,]
library(foreach)
library(doParallel)
library(parallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
registerDoParallel(cl)
parallel::clusterExport(cl = cl, varlist = c('AE_mat', 'AE_mat_constant', 'AE_mat_linear',
'AE_mat_curvilinear','scenarios', 'N_sim'), envir = .GlobalEnv)
res_list_final <- list()
res_list_final <- foreach(i=1:nrow(scenarios),.packages='TMB') %dopar% {
sim_Fn(OM_text = as.character(scenarios[i,2]),
N_sim = N_sim, AE_mat = get(scenarios[i,3]))
}
View(res_list_final)
